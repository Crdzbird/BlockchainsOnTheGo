// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blockchain.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Block struct {
	PrvHash              string   `protobuf:"bytes,1,opt,name=prvHash,proto3" json:"prvHash,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Hash                 string   `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9ac6287ce250c9a, []int{0}
}

func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetPrvHash() string {
	if m != nil {
		return m.PrvHash
	}
	return ""
}

func (m *Block) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Block) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type BlockRequest struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockRequest) Reset()         { *m = BlockRequest{} }
func (m *BlockRequest) String() string { return proto.CompactTextString(m) }
func (*BlockRequest) ProtoMessage()    {}
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9ac6287ce250c9a, []int{1}
}

func (m *BlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockRequest.Unmarshal(m, b)
}
func (m *BlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockRequest.Marshal(b, m, deterministic)
}
func (m *BlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRequest.Merge(m, src)
}
func (m *BlockRequest) XXX_Size() int {
	return xxx_messageInfo_BlockRequest.Size(m)
}
func (m *BlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRequest proto.InternalMessageInfo

func (m *BlockRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type BlockResponce struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockResponce) Reset()         { *m = BlockResponce{} }
func (m *BlockResponce) String() string { return proto.CompactTextString(m) }
func (*BlockResponce) ProtoMessage()    {}
func (*BlockResponce) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9ac6287ce250c9a, []int{2}
}

func (m *BlockResponce) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockResponce.Unmarshal(m, b)
}
func (m *BlockResponce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockResponce.Marshal(b, m, deterministic)
}
func (m *BlockResponce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResponce.Merge(m, src)
}
func (m *BlockResponce) XXX_Size() int {
	return xxx_messageInfo_BlockResponce.Size(m)
}
func (m *BlockResponce) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResponce.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResponce proto.InternalMessageInfo

func (m *BlockResponce) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type ChainStreamResponse struct {
	Block                *Block   `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainStreamResponse) Reset()         { *m = ChainStreamResponse{} }
func (m *ChainStreamResponse) String() string { return proto.CompactTextString(m) }
func (*ChainStreamResponse) ProtoMessage()    {}
func (*ChainStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9ac6287ce250c9a, []int{3}
}

func (m *ChainStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainStreamResponse.Unmarshal(m, b)
}
func (m *ChainStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainStreamResponse.Marshal(b, m, deterministic)
}
func (m *ChainStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainStreamResponse.Merge(m, src)
}
func (m *ChainStreamResponse) XXX_Size() int {
	return xxx_messageInfo_ChainStreamResponse.Size(m)
}
func (m *ChainStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChainStreamResponse proto.InternalMessageInfo

func (m *ChainStreamResponse) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type ChainRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainRequest) Reset()         { *m = ChainRequest{} }
func (m *ChainRequest) String() string { return proto.CompactTextString(m) }
func (*ChainRequest) ProtoMessage()    {}
func (*ChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9ac6287ce250c9a, []int{4}
}

func (m *ChainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainRequest.Unmarshal(m, b)
}
func (m *ChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainRequest.Marshal(b, m, deterministic)
}
func (m *ChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainRequest.Merge(m, src)
}
func (m *ChainRequest) XXX_Size() int {
	return xxx_messageInfo_ChainRequest.Size(m)
}
func (m *ChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChainRequest proto.InternalMessageInfo

type ChainResponce struct {
	Blocks               []*Block `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainResponce) Reset()         { *m = ChainResponce{} }
func (m *ChainResponce) String() string { return proto.CompactTextString(m) }
func (*ChainResponce) ProtoMessage()    {}
func (*ChainResponce) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9ac6287ce250c9a, []int{5}
}

func (m *ChainResponce) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainResponce.Unmarshal(m, b)
}
func (m *ChainResponce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainResponce.Marshal(b, m, deterministic)
}
func (m *ChainResponce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainResponce.Merge(m, src)
}
func (m *ChainResponce) XXX_Size() int {
	return xxx_messageInfo_ChainResponce.Size(m)
}
func (m *ChainResponce) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainResponce.DiscardUnknown(m)
}

var xxx_messageInfo_ChainResponce proto.InternalMessageInfo

func (m *ChainResponce) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterType((*Block)(nil), "proto.Block")
	proto.RegisterType((*BlockRequest)(nil), "proto.BlockRequest")
	proto.RegisterType((*BlockResponce)(nil), "proto.BlockResponce")
	proto.RegisterType((*ChainStreamResponse)(nil), "proto.ChainStreamResponse")
	proto.RegisterType((*ChainRequest)(nil), "proto.ChainRequest")
	proto.RegisterType((*ChainResponce)(nil), "proto.ChainResponce")
}

func init() { proto.RegisterFile("blockchain.proto", fileDescriptor_e9ac6287ce250c9a) }

var fileDescriptor_e9ac6287ce250c9a = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0x41, 0x4e, 0xc3, 0x30,
	0x10, 0xac, 0x29, 0x29, 0xb0, 0xa4, 0x80, 0xdc, 0x1e, 0xac, 0x9c, 0xaa, 0x85, 0x03, 0xa7, 0x0a,
	0x15, 0x21, 0xc4, 0x11, 0x90, 0x28, 0x5c, 0xcb, 0x0b, 0xdc, 0xc4, 0x52, 0x10, 0x50, 0x87, 0xd8,
	0xf0, 0x44, 0xde, 0x85, 0xbc, 0xeb, 0x86, 0x58, 0x70, 0x8a, 0x77, 0x76, 0x66, 0x76, 0x26, 0x70,
	0xb2, 0x7e, 0xb3, 0xe5, 0x6b, 0x59, 0xeb, 0x97, 0xcd, 0xbc, 0x69, 0xad, 0xb7, 0x32, 0xa3, 0x0f,
	0x3e, 0x41, 0x76, 0x17, 0x56, 0x52, 0xc1, 0x5e, 0xd3, 0x7e, 0x3d, 0x6a, 0x57, 0x2b, 0x31, 0x13,
	0xe7, 0x07, 0xab, 0xed, 0x28, 0x25, 0xec, 0x56, 0xda, 0x6b, 0xb5, 0x43, 0x30, 0xbd, 0x03, 0x56,
	0x07, 0xea, 0x90, 0xb1, 0xf0, 0x46, 0x84, 0x9c, 0xac, 0x56, 0xe6, 0xe3, 0xd3, 0x38, 0xdf, 0xe9,
	0xc4, 0xaf, 0x0e, 0x4f, 0x61, 0x1c, 0x39, 0xae, 0xb1, 0x9b, 0xd2, 0x74, 0x46, 0xa2, 0x67, 0x74,
	0x03, 0x93, 0xfb, 0x90, 0xf4, 0xd9, 0xb7, 0x46, 0xbf, 0x33, 0xd5, 0x19, 0x89, 0x90, 0x51, 0x0b,
	0xe2, 0x1e, 0x2e, 0x72, 0x2e, 0x32, 0x67, 0x3f, 0x5e, 0xe1, 0x11, 0xe4, 0x24, 0x8d, 0x19, 0xf0,
	0x0a, 0xc6, 0x71, 0x8e, 0xf7, 0xce, 0x60, 0x44, 0x4c, 0xa7, 0xc4, 0x6c, 0xf8, 0xc7, 0x25, 0xee,
	0x16, 0xdf, 0x02, 0x80, 0x10, 0x12, 0xcb, 0x6b, 0xd8, 0xbf, 0xad, 0x2a, 0xfe, 0x4f, 0x93, 0x44,
	0xc0, 0x67, 0x8a, 0x69, 0x0a, 0xf2, 0x2d, 0x1c, 0xc8, 0x07, 0x38, 0xe6, 0x12, 0x4b, 0xe3, 0x69,
	0xe7, 0x3a, 0x7d, 0x3f, 0x66, 0x51, 0xf4, 0xc1, 0xb4, 0x36, 0x0e, 0x2e, 0x44, 0x08, 0xb0, 0x34,
	0x9e, 0xc3, 0xfc, 0x6b, 0x30, 0x4d, 0xc1, 0x6d, 0x80, 0xf5, 0x88, 0xe0, 0xcb, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xdf, 0x0e, 0x91, 0x9d, 0x00, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BlockChainClient is the client API for BlockChain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockChainClient interface {
	AddBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponce, error)
	StreamGetBlocks(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (BlockChain_StreamGetBlocksClient, error)
	GetChain(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (*ChainResponce, error)
}

type blockChainClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockChainClient(cc grpc.ClientConnInterface) BlockChainClient {
	return &blockChainClient{cc}
}

func (c *blockChainClient) AddBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponce, error) {
	out := new(BlockResponce)
	err := c.cc.Invoke(ctx, "/proto.BlockChain/AddBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainClient) StreamGetBlocks(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (BlockChain_StreamGetBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BlockChain_serviceDesc.Streams[0], "/proto.BlockChain/StreamGetBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockChainStreamGetBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockChain_StreamGetBlocksClient interface {
	Recv() (*ChainStreamResponse, error)
	grpc.ClientStream
}

type blockChainStreamGetBlocksClient struct {
	grpc.ClientStream
}

func (x *blockChainStreamGetBlocksClient) Recv() (*ChainStreamResponse, error) {
	m := new(ChainStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockChainClient) GetChain(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (*ChainResponce, error) {
	out := new(ChainResponce)
	err := c.cc.Invoke(ctx, "/proto.BlockChain/GetChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockChainServer is the server API for BlockChain service.
type BlockChainServer interface {
	AddBlock(context.Context, *BlockRequest) (*BlockResponce, error)
	StreamGetBlocks(*ChainRequest, BlockChain_StreamGetBlocksServer) error
	GetChain(context.Context, *ChainRequest) (*ChainResponce, error)
}

// UnimplementedBlockChainServer can be embedded to have forward compatible implementations.
type UnimplementedBlockChainServer struct {
}

func (*UnimplementedBlockChainServer) AddBlock(ctx context.Context, req *BlockRequest) (*BlockResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlock not implemented")
}
func (*UnimplementedBlockChainServer) StreamGetBlocks(req *ChainRequest, srv BlockChain_StreamGetBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGetBlocks not implemented")
}
func (*UnimplementedBlockChainServer) GetChain(ctx context.Context, req *ChainRequest) (*ChainResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChain not implemented")
}

func RegisterBlockChainServer(s *grpc.Server, srv BlockChainServer) {
	s.RegisterService(&_BlockChain_serviceDesc, srv)
}

func _BlockChain_AddBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServer).AddBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BlockChain/AddBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServer).AddBlock(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChain_StreamGetBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChainRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockChainServer).StreamGetBlocks(m, &blockChainStreamGetBlocksServer{stream})
}

type BlockChain_StreamGetBlocksServer interface {
	Send(*ChainStreamResponse) error
	grpc.ServerStream
}

type blockChainStreamGetBlocksServer struct {
	grpc.ServerStream
}

func (x *blockChainStreamGetBlocksServer) Send(m *ChainStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockChain_GetChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServer).GetChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BlockChain/GetChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServer).GetChain(ctx, req.(*ChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockChain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BlockChain",
	HandlerType: (*BlockChainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBlock",
			Handler:    _BlockChain_AddBlock_Handler,
		},
		{
			MethodName: "GetChain",
			Handler:    _BlockChain_GetChain_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGetBlocks",
			Handler:       _BlockChain_StreamGetBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blockchain.proto",
}
